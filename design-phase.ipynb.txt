{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9803636,"sourceType":"datasetVersion","datasetId":6008826},{"sourceId":9806172,"sourceType":"datasetVersion","datasetId":6010767}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom keras.models import load_model\nfrom keras.models import Sequential\nfrom keras.layers import Input\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\nfrom keras.layers import Flatten\nfrom keras.layers import Conv2D\nfrom keras.layers import MaxPooling2D\nfrom keras.utils import to_categorical\nfrom keras import backend as K","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-02-20T16:57:08.020996Z","iopub.execute_input":"2025-02-20T16:57:08.021781Z","iopub.status.idle":"2025-02-20T16:57:27.214132Z","shell.execute_reply.started":"2025-02-20T16:57:08.021526Z","shell.execute_reply":"2025-02-20T16:57:27.212426Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"# fix random seed for reproducibility\nseed = 7\nnp.random.seed(seed)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T16:57:33.740009Z","iopub.execute_input":"2025-02-20T16:57:33.740459Z","iopub.status.idle":"2025-02-20T16:57:33.746538Z","shell.execute_reply.started":"2025-02-20T16:57:33.740394Z","shell.execute_reply":"2025-02-20T16:57:33.744987Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"import itertools\nchunksize = 10000\ni=10000\ndataset=[]\nfor chunk in pd.read_csv('../input/character-dataset/final1.csv', chunksize=chunksize):\n    dataset.append(chunk.values)\n    i+=10000\n    print(i,\" row\")\n    #print(chunk)\n\ndef oneDArray(x):\n    return list(itertools.chain(*x))   \ndataset=oneDArray(dataset)\n#convert to NumPy array\ndataset=np.asarray(dataset)\nprint(type(dataset))\nprint(dataset.size)\n\nX = dataset[:,0:900]\n#slices only last column representing target label\nY = dataset[:,-1]\n#invert pixel intensities\nX=np.subtract(255,X)\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T16:57:37.696829Z","iopub.execute_input":"2025-02-20T16:57:37.697438Z","iopub.status.idle":"2025-02-20T16:58:48.293750Z","shell.execute_reply.started":"2025-02-20T16:57:37.697364Z","shell.execute_reply":"2025-02-20T16:58:48.292164Z"}},"outputs":[{"name":"stdout","text":"20000  row\n30000  row\n40000  row\n50000  row\n60000  row\n70000  row\n80000  row\n90000  row\n100000  row\n110000  row\n120000  row\n130000  row\n140000  row\n150000  row\n160000  row\n170000  row\n180000  row\n190000  row\n200000  row\n210000  row\n220000  row\n230000  row\n240000  row\n250000  row\n260000  row\n270000  row\n280000  row\n290000  row\n300000  row\n310000  row\n320000  row\n330000  row\n340000  row\n350000  row\n360000  row\n370000  row\n380000  row\n390000  row\n400000  row\n410000  row\n420000  row\n430000  row\n440000  row\n450000  row\n460000  row\n470000  row\n480000  row\n490000  row\n500000  row\n<class 'numpy.ndarray'>\n438374342\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"pd.read_csv('/kaggle/input/character-dataset/final1.csv').head(5)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T16:08:50.892176Z","iopub.execute_input":"2025-02-18T16:08:50.892867Z","iopub.status.idle":"2025-02-18T16:09:37.756193Z","shell.execute_reply.started":"2025-02-18T16:08:50.892828Z","shell.execute_reply":"2025-02-18T16:09:37.755138Z"}},"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"   255  255.1  255.2  255.3  255.4  255.5  255.6  255.7  255.8  255.9  ...  \\\n0  255    255    255    255    255    255    255    255    255    255  ...   \n1  255    255    255    255    255    255    255    255    255    255  ...   \n2  255    255    255    255    255    255    255    255    255    255  ...   \n3  255    255    255    255    255    255    255    255    255    255  ...   \n4  255    255    255    255    255    255    255    255    255    255  ...   \n\n   255.727  255.728  255.729  255.730  255.731  255.732  255.733  255.734  \\\n0      255      255      255      255      255      255      255      255   \n1      255      255      255      255      255      255      255      255   \n2      255      255      255      255      255      255      255      255   \n3      255      255      255      255      255      255      255      255   \n4      255      255      255      255      255      255      255      255   \n\n   255.735  0.6  \n0      255    0  \n1      255    0  \n2      255    0  \n3      255    0  \n4      255    0  \n\n[5 rows x 901 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>255</th>\n      <th>255.1</th>\n      <th>255.2</th>\n      <th>255.3</th>\n      <th>255.4</th>\n      <th>255.5</th>\n      <th>255.6</th>\n      <th>255.7</th>\n      <th>255.8</th>\n      <th>255.9</th>\n      <th>...</th>\n      <th>255.727</th>\n      <th>255.728</th>\n      <th>255.729</th>\n      <th>255.730</th>\n      <th>255.731</th>\n      <th>255.732</th>\n      <th>255.733</th>\n      <th>255.734</th>\n      <th>255.735</th>\n      <th>0.6</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>...</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>...</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>...</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>...</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>...</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>255</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 901 columns</p>\n</div>"},"metadata":{}}],"execution_count":4},{"cell_type":"code","source":"X_train = X_train.reshape(X_train.shape[0], 30, 30, 1).astype('float32')\nX_test = X_test.reshape(X_test.shape[0], 30, 30, 1).astype('float32')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T16:59:02.860029Z","iopub.execute_input":"2025-02-20T16:59:02.864008Z","iopub.status.idle":"2025-02-20T16:59:04.617707Z","shell.execute_reply.started":"2025-02-20T16:59:02.863888Z","shell.execute_reply":"2025-02-20T16:59:04.616320Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"num_classes = 122\n\n# normalize inputs from 0-255 to 0-1\nX_train = X_train / 255\nX_test = X_test / 255\n#One hot encoding:Each vector has a length equal to num_classes,\n#with a 1 at the index corresponding to the class label and 0s elsewhere.\n# one hot encode outputs\nY_train = to_categorical(Y_train, num_classes)\nY_test = to_categorical(Y_test, num_classes)\n\nprint(Y_train.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T16:59:13.200817Z","iopub.execute_input":"2025-02-20T16:59:13.201223Z","iopub.status.idle":"2025-02-20T16:59:15.085309Z","shell.execute_reply.started":"2025-02-20T16:59:13.201191Z","shell.execute_reply":"2025-02-20T16:59:15.083697Z"}},"outputs":[{"name":"stdout","text":"(389233, 122)\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"def baseline_model():\n\t# create model\n    model = Sequential()\n    model.add(Input(shape=(30, 30, 1)))\n    model.add(Conv2D(32, (5, 5), activation='relu'))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(Dropout(0.2))\n    model.add(Flatten())\n    model.add(Dense(128, activation='relu'))\n    model.add(Dense(num_classes, activation='softmax'))\n\t# Compile model\n    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n    return model","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-27T16:39:44.001722Z","iopub.execute_input":"2025-01-27T16:39:44.002197Z","iopub.status.idle":"2025-01-27T16:39:44.009132Z","shell.execute_reply.started":"2025-01-27T16:39:44.002155Z","shell.execute_reply":"2025-01-27T16:39:44.007957Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"def first_model():\n    model=Sequential()\n    #Layer 1\n    #Conv Layer 1\n    model.add(Conv2D(filters = 6, \n                     kernel_size =5,\n                     strides = 1, \n                     activation = 'relu', \n                     input_shape = (30,30,1)))\n    #Pooling layer 1\n    model.add(MaxPooling2D(pool_size = 2, strides = 2))\n    #Layer 2\n    #Conv Layer 2\n    model.add(Conv2D(filters = 16, \n                     kernel_size = 5,\n                     strides = 1,\n                     activation = 'relu',\n                     input_shape = (6,14,14)))\n    #Pooling Layer 2\n    model.add(MaxPooling2D(pool_size = 2, strides = 2))\n    #Flatten\n    model.add(Flatten())\n    #Layer 3\n    #Fully connected layer 1\n    model.add(Dense(units = 120, activation = 'relu'))\n    #Layer 4\n    #Fully connected layer 2\n    model.add(Dense(units = 84, activation = 'relu'))\n    #Layer 5\n    #Output Layer\n    model.add(Dense(num_classes, activation = 'softmax'))\n    #compile model\n    model.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])\n    return model","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def final_model():\n    model = Sequential()\n    model.add(Input(shape=(30, 30, 1)))\n    model.add(Conv2D(32, (5, 5), activation='relu'))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(Conv2D(64, (5, 5), activation='relu'))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(Dropout(0.2))\n    model.add(Flatten())\n    model.add(Dense(128, activation='relu'))\n    model.add(Dense(96, activation='relu'))\n    model.add(Dense(num_classes, activation='softmax'))\n\t# Compile model\n    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n    return model","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T16:59:31.076600Z","iopub.execute_input":"2025-02-20T16:59:31.077014Z","iopub.status.idle":"2025-02-20T16:59:31.087041Z","shell.execute_reply.started":"2025-02-20T16:59:31.076981Z","shell.execute_reply":"2025-02-20T16:59:31.085174Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"# build the model\nmodel = final_model()\n# Fit the model\nmodel.fit(X_train, Y_train, validation_data=(X_test, Y_test), epochs=20, batch_size=200, verbose=2)\n# Final evaluation of the model\nscores = model.evaluate(X_test, Y_test, verbose=0)\nprint(\"CNN Error: %.2f%%\" % (100-scores[1]*100))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T16:59:48.991168Z","iopub.execute_input":"2025-02-20T16:59:48.991653Z","iopub.status.idle":"2025-02-20T18:23:35.624991Z","shell.execute_reply.started":"2025-02-20T16:59:48.991616Z","shell.execute_reply":"2025-02-20T18:23:35.621894Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/20\n1947/1947 - 264s - 135ms/step - accuracy: 0.6481 - loss: 1.2866 - val_accuracy: 0.8542 - val_loss: 0.4826\nEpoch 2/20\n1947/1947 - 251s - 129ms/step - accuracy: 0.8603 - loss: 0.4543 - val_accuracy: 0.9084 - val_loss: 0.3044\nEpoch 3/20\n1947/1947 - 252s - 129ms/step - accuracy: 0.8983 - loss: 0.3274 - val_accuracy: 0.9278 - val_loss: 0.2407\nEpoch 4/20\n1947/1947 - 254s - 131ms/step - accuracy: 0.9181 - loss: 0.2607 - val_accuracy: 0.9422 - val_loss: 0.1932\nEpoch 5/20\n1947/1947 - 251s - 129ms/step - accuracy: 0.9286 - loss: 0.2245 - val_accuracy: 0.9419 - val_loss: 0.1895\nEpoch 6/20\n1947/1947 - 247s - 127ms/step - accuracy: 0.9376 - loss: 0.1962 - val_accuracy: 0.9487 - val_loss: 0.1729\nEpoch 7/20\n1947/1947 - 247s - 127ms/step - accuracy: 0.9437 - loss: 0.1770 - val_accuracy: 0.9556 - val_loss: 0.1470\nEpoch 8/20\n1947/1947 - 263s - 135ms/step - accuracy: 0.9509 - loss: 0.1518 - val_accuracy: 0.9601 - val_loss: 0.1340\nEpoch 10/20\n1947/1947 - 246s - 126ms/step - accuracy: 0.9546 - loss: 0.1415 - val_accuracy: 0.9615 - val_loss: 0.1292\nEpoch 11/20\n1947/1947 - 247s - 127ms/step - accuracy: 0.9563 - loss: 0.1342 - val_accuracy: 0.9609 - val_loss: 0.1315\nEpoch 12/20\n1947/1947 - 249s - 128ms/step - accuracy: 0.9588 - loss: 0.1274 - val_accuracy: 0.9604 - val_loss: 0.1340\nEpoch 13/20\n1947/1947 - 259s - 133ms/step - accuracy: 0.9603 - loss: 0.1212 - val_accuracy: 0.9644 - val_loss: 0.1218\nEpoch 14/20\n1947/1947 - 250s - 128ms/step - accuracy: 0.9619 - loss: 0.1168 - val_accuracy: 0.9658 - val_loss: 0.1192\nEpoch 15/20\n1947/1947 - 246s - 126ms/step - accuracy: 0.9627 - loss: 0.1134 - val_accuracy: 0.9649 - val_loss: 0.1239\nEpoch 16/20\n1947/1947 - 247s - 127ms/step - accuracy: 0.9643 - loss: 0.1085 - val_accuracy: 0.9647 - val_loss: 0.1219\nEpoch 17/20\n1947/1947 - 243s - 125ms/step - accuracy: 0.9649 - loss: 0.1061 - val_accuracy: 0.9668 - val_loss: 0.1175\nEpoch 18/20\n1947/1947 - 244s - 125ms/step - accuracy: 0.9664 - loss: 0.1025 - val_accuracy: 0.9665 - val_loss: 0.1172\nEpoch 19/20\n1947/1947 - 243s - 125ms/step - accuracy: 0.9661 - loss: 0.1015 - val_accuracy: 0.9651 - val_loss: 0.1214\nEpoch 20/20\n1947/1947 - 250s - 128ms/step - accuracy: 0.9673 - loss: 0.0986 - val_accuracy: 0.9670 - val_loss: 0.1167\nCNN Error: 3.30%\n","output_type":"stream"}],"execution_count":9},{"cell_type":"code","source":"labels = ['അ','ഖ','മ്മ','മ്ല','യ്യ','ല്ല','വ്വ','ശ്ശ',\n              'ശ്ല','ശ്ച','ഷ്ട','സ്ല','ഗ','സ്സ','സ്റ്റ','സ്ഥ',\n              'ഹ്മ','ഹ്ന','ഹ്ല','ള്ള','റ്റ','ൻ','ഘ','ൽ',\n              'ർ','ൾ','ൺ','ന്ധ','ങ','ച','ഛ','ജ',\n              'ഝ','ഞ','ട','ആ','ഠ','ഡ','ഢ','ണ',\n              'ത','ഥ','ദ','ധ','ന','പ','ഇ','ഫ',\n              'ബ','ഭ','മ','യ','ര','ല','വ','ശ',\n              'ഷ','ഉ','സ','ഹ','ള','ഴ','റ','ാ',\n              'ി','ീ','ു','ൂ','ഋ','ൃ','െ','േ',\n              'ൗ','്','്യ','്ര','്വ','ക്ക','ക്ല','എ',\n              'ക്ഷ','ക്ത','ഗ്ഗ','ഗ്ല','ഗ്ന','ഗ്മ','ങ്ക','ങ്ങ',\n              'ച്ച','ച്ഛ','ഏ','ജ്ജ','ജ്ഞ','ഞ്ച','ഞ്ഞ','ട്ട',\n              'ഡ്ഡ','ണ്ട','ണ്ഡ','ണ്മ','ണ്ണ','ഒ','ത്ത','ത്ഥ',\n              'ത്ഭ','ത്സ','ത്മ','ദ്ദ','ദ്ധ','ൻ്റ','ന്ത','ന്ദ',\n              'ക','ന്ന','ന്മ','ന്ഥ','പ്പ','പ്ല','ബ്ബ','ബ്ല','ബ്ദ','മ്പ']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T18:24:07.313102Z","iopub.execute_input":"2025-02-20T18:24:07.313548Z","iopub.status.idle":"2025-02-20T18:24:07.325432Z","shell.execute_reply.started":"2025-02-20T18:24:07.313507Z","shell.execute_reply":"2025-02-20T18:24:07.323985Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"sample_chars = X_test[60:76,:]\nsample_labels= Y_test[60:76]\npredictions=model.predict(sample_chars)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T18:24:12.723881Z","iopub.execute_input":"2025-02-20T18:24:12.724333Z","iopub.status.idle":"2025-02-20T18:24:12.877740Z","shell.execute_reply.started":"2025-02-20T18:24:12.724298Z","shell.execute_reply":"2025-02-20T18:24:12.876003Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 88ms/step\n","output_type":"stream"}],"execution_count":11},{"cell_type":"code","source":"indices=[list(prediction).index(max(prediction)) for prediction in predictions]\npredicted_labels=[labels[index] for index in indices]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T18:24:18.108440Z","iopub.execute_input":"2025-02-20T18:24:18.108893Z","iopub.status.idle":"2025-02-20T18:24:18.116145Z","shell.execute_reply.started":"2025-02-20T18:24:18.108856Z","shell.execute_reply":"2025-02-20T18:24:18.114424Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score\n\n# Get model predictions\npredictions = model.predict(X_test)\n\n# Convert predictions to class indices\npredicted_classes = np.argmax(predictions, axis=1)\n\n# Ensure Y_test is also in integer format (not one-hot encoded)\nif len(Y_test.shape) > 1 and Y_test.shape[1] > 1:\n    Y_test = np.argmax(Y_test, axis=1)  # Convert one-hot to class indices\n\n# Compute accuracy\naccuracy = accuracy_score(Y_test, predicted_classes) * 100\nprint(f\"🔥 Model Prediction Accuracy: {accuracy:.2f}% 🔥\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-20T18:24:21.578231Z","iopub.execute_input":"2025-02-20T18:24:21.578696Z","iopub.status.idle":"2025-02-20T18:24:49.533489Z","shell.execute_reply.started":"2025-02-20T18:24:21.578649Z","shell.execute_reply":"2025-02-20T18:24:49.532300Z"}},"outputs":[{"name":"stdout","text":"\u001b[1m3041/3041\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 8ms/step\n🔥 Model Prediction Accuracy: 96.70% 🔥\n","output_type":"stream"}],"execution_count":13},{"cell_type":"code","source":"import matplotlib.pyplot as plt\ncolumns = 4\nrows = 4\nw=30\nh=30\nfig=plt.figure(figsize=(8, 8))\nfor i in range(1, columns*rows+1):\n    img=sample_chars[i-1].reshape((30,30))\n    fig.add_subplot(rows, columns, i)\n    #plt.title(predicted_labels[i-1])\n    plt.imshow(img,cmap='gray')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T05:18:43.350222Z","iopub.execute_input":"2025-02-18T05:18:43.350618Z","iopub.status.idle":"2025-02-18T05:18:44.813508Z","shell.execute_reply.started":"2025-02-18T05:18:43.350591Z","shell.execute_reply":"2025-02-18T05:18:44.812077Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x800 with 16 Axes>","image/png":"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mTZtmlb/4Ac/sNqY13ktzPzhD3+o1RdccIHVxuTn7wd6zut59bNAJ50FOF6vvea9zTZej2O+pnsx75vu9+m60Lc3AgAAQN/EQBMAAACBYKAJAACAQER2jqbJz0ase/futc6Z8xm95vz4mSNx5plnavUrr7xitTn55JO1+sc//rHVJtX8C69NjhcuXKjViUTCavPoo49qdTwe7/ZxREQ+8YlPWOduvPFGrWZOUmb4mVtpzjn24mdeUFB++tOfarU5p1TEe/4wou3UU0+1zplzzb1enx988EGtXrFihdVmzpw5Wu3nQwHuuOMOrf7ABz5gtTFft7zmaA4ePDjlY5n9Yc56MLzmTfpZm+D1czXl5eVptddrqJmXw4cPa7XXXPN05odmap6pa6L/HQAAAMBJDDQBAAAQCAaaAAAACAQDTQAAAASiXy0Guv/++61zhYWFWu014TudxS1PP/20da6jo0OrX3jhBauNOenZnJjsNeHZXAx08cUXp+xfS0uLde63v/2tVnt9Fq650fuhQ4dSPhZSMyeX+2FOYhcRaW9v1+p0F994/R68nZ9N572Yi0S+9a1vWW1STbyHWxobG61z48ePT3ndoEGDtNpr43fztey///u/tTo/P9+6xnw99FpIYmbV68MFvBZDpsJioJ7zs9jF62+wuYDSz2bn3//+9602l1xyiVa/+uqrKR/L/EAWc7GtiMif//xnrX799detNiY/z0UUF+DyjiYAAAACwUATAAAAgWCgCQAAgED0mTmaDQ0NKduYG/B6ydQcG6/5l+edd17K68y5Q+Z8DHOTYy81NTXWueXLl3d7XxF/m9C6Phckqsw5QF7zHffs2aPVra2tVhuv+WjpMOc8m/3xemw/Zs+erdVf/epXrTZDhgxJ694IR1FRkXXOfH3xmvNrzieeMmWK1ebll1/WanOOZl1dnXXNBz/4Qa32ek0/66yztNrcGF7E34bgOHF+/qaYr48i9odaeG3OvmzZspT3Offcc7Xa6++e+Xpnzi/+1a9+ZV1jzh82s/tOj2XqC39zeUcTAAAAgWCgCQAAgEAw0AQAAEAg+swcTa85QN/+9re1+gc/+IHVZtasWVr9u9/9LuVjec35MR/fa7+uBQsWpLy3eZ+bb75Zqy+66CLrmurqaq029yoUEfn73/+e8rHRO7yyas7V8Wrznve8R6s/9alPWW02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"},"metadata":{}}],"execution_count":12},{"cell_type":"code","source":"model.save_weights('final.weights.h5')\nmodel.save('finalmodel.keras')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T05:18:54.501051Z","iopub.execute_input":"2025-02-18T05:18:54.501407Z","iopub.status.idle":"2025-02-18T05:18:54.695955Z","shell.execute_reply.started":"2025-02-18T05:18:54.501379Z","shell.execute_reply":"2025-02-18T05:18:54.694743Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"for l in predicted_labels:\n    print(l)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T05:18:57.212821Z","iopub.execute_input":"2025-02-18T05:18:57.213193Z","iopub.status.idle":"2025-02-18T05:18:57.218738Z","shell.execute_reply.started":"2025-02-18T05:18:57.213162Z","shell.execute_reply":"2025-02-18T05:18:57.217386Z"}},"outputs":[{"name":"stdout","text":"ൃ\nഛ\nവ്വ\nക്ത\nന്മ\nര\nയ്യ\nദ്ദ\nാ\n്വ\nന്ദ\nണ്ട\nവ്വ\nസ\nെ\nബ്ദ\n","output_type":"stream"}],"execution_count":14}]}